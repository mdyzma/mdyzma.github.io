<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator>
  
  
  <link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2017-07-15T23:38:10+02:00</updated>
  <id>http://localhost:4000//</id>

  
    <title type="html">Consider Python</title>
  

  
    <subtitle>Blog dedicated to promote python/R/Julia as &quot;core data science&quot; tools.
</subtitle>
  

  
    <author>
        <name>Michal Dyzma</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">Jupyter Notebook - python based lab book</title>
      
      <link href="http://localhost:4000/2017/03/03/jupyter-notebook-lab-book/" rel="alternate" type="text/html" title="Jupyter Notebook - python based lab book" />
      <published>2017-03-03T16:28:54+01:00</published>
      <updated>2017-03-03T16:28:54+01:00</updated>
      <id>http://localhost:4000/2017/03/03/jupyter-notebook-lab-book</id>
      <content type="html" xml:base="http://localhost:4000/2017/03/03/jupyter-notebook-lab-book/">&lt;p&gt;Data analysis using &lt;strong&gt;Jupyter Notebook&lt;/strong&gt;. Natural sciences more and more rely on skills related to Data Science. Experiments produce more and more data, and skilled researcher has to know how to deal with variety of data and sometime very large datasets. &lt;strong&gt;Anaconda&lt;/strong&gt; Python Distribution offers large set of great tools to manipulate any kind of data “out of the box”. Multitude of community packages allows to read, analyze and report all kinds of data produced by science. It is caused mostly by simple fact, that scientific community is developing it’s tools mostly in Python. How to work with small and large data in python and make Jupyter Notebook your lab-book? Check this article.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot; style=&quot;text-align: justify; vertical-align:middle;&quot;&gt;
Notebooks and related data files from this article can be downloaded from this &lt;a href=&quot;https://github.com/mdyzma/blog-src-files/tree/master/2017-03-03-jupyter-notebook-lab-book&quot;&gt;GitHub repository&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;install-anaconda&quot;&gt;Install Anaconda&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Data Science&lt;/em&gt; skills are essential for every decent researcher.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.continuum.io/DOWNLOADS&quot;&gt;Anaconda Python Distribution&lt;/a&gt; prepared by Continuum Analytics is the most comprehensive and free bundle of Python software dedicated to &lt;strong&gt;Data Science&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I strongly recommended to use &lt;a href=&quot;https://www.continuum.io/DOWNLOADS&quot;&gt;Anaconda distribution&lt;/a&gt;, which will install Python interpreter, the Jupyter Notebook, and several other packages commonly used in data science and this tutorial. If you choose Anaconda 3, your interpreter will be of version 3.6 (current version) or higher (3.7 alpha is already available).&lt;/p&gt;

&lt;p&gt;Execute script and just follow instructions from installation program (your current version may differ from the one listed here):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;wget https://repo.continuum.io/archive/Anaconda3-4.3.1-Linux-x86_64.sh

--2017-03-03 19:36:37--  https://repo.continuum.io/archive/Anaconda3-4.3.1-Linux-x86_64.sh
Resolving repo.continuum.io &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;repo.continuum.io&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;... 104.16.18.10, 104.16.19.10, 2400:cb00:2048:1::6810:130a, ...
Connecting to repo.continuum.io &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;repo.continuum.io&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|104.16.18.10|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 497343851 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;474M&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;application/x-sh]
Saving to: &lt;span class=&quot;s1&quot;&gt;'Anaconda3-4.3.1-Linux-x86_64.sh'&lt;/span&gt;

Anaconda3-4.3.1-Linux-x86_64.sh     100%[&lt;span class=&quot;o&quot;&gt;==========================================&lt;/span&gt;&amp;gt;] 474.30M  14.1MB/s &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;34s

2017-03-03 19:37:12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;13.8 MB/s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; - &lt;span class=&quot;s1&quot;&gt;'Anaconda3-4.3.1-Linux-x86_64.sh'&lt;/span&gt; saved &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;497343851/497343851]

&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;bash ./Anaconda3-4.3.1-Linux-x86_64.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To make sure software is up to date, run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;conda update --all&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Anaconda will install nearly 200 packages (182 to be exact), including most important for this tutorial: Jupyter Notebook, ipython, pandas, numpy, statsmodels&lt;/p&gt;

&lt;h2 id=&quot;anaconda-channels&quot;&gt;Anaconda channels&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt; is built in Anaconda package manager, which uses default, maintained by Contunuum Analytics python packages repository. Some packages are distributed in repositories owned by groups other than Anaconda team. Repositories are called channels. One can indicate channel simply by choosing &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--channel&lt;/code&gt; flag during invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;conda install&lt;/code&gt; command. Some of the channels are supported by continuum Analytics, like &lt;code class=&quot;highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;omnia&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;. They are full of excellent packages developed by Anaconda community. Every time I mention I want to use other channel than default, conda will check this repositories for available packages. It is possible to add this channels to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.condarc&lt;/code&gt; file (see: &lt;a href=&quot;https://conda.io/docs/config.html#the-conda-configuration-file-condarc&quot;&gt;here&lt;/a&gt;). First config file must be created by running &lt;code class=&quot;highlighter-rouge&quot;&gt;conda config&lt;/code&gt; command. If other version of this file is placed in Anaconda installation root directory it will override  users home configuration. to notify package manager, that every time  I want to install something this channels should be checked. Order of repositories is important. In case packages are deployed to both repositories listed in channels section, last repository super-seeds all above it. Example file looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;channels:
    - omnia
    - conda-forge
    - r
    - defaults

show_channel_urls: True

proxy_servers:
    http: http://user:pass@corp.com:8080
    https: https://user:pass@corp.com:8080&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Last group of inputs is very important for users behind corporate proxy, which will block &lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt; package lookup, unless correct settings are provided. Additionally one can alway use official python package manager &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; in parallel to &lt;code class=&quot;highlighter-rouge&quot;&gt;conda&lt;/code&gt;. Conda is able to sense origin of the package and shows this during package listing. Pip checks &lt;a href=&quot;https://pypi.python.org/pypi&quot;&gt;PyPI&lt;/a&gt; (Python Packages Index) repository for python packages (which stores nearly 110 000 packages).&lt;/p&gt;

&lt;p&gt;Another great part about Anaconda and Jupyter Notebook. It is cross-platform, which means, that Notebook files created on one system will open on other system with similar package configuration.&lt;/p&gt;

&lt;h2 id=&quot;jupyter-notebook--jupyter-lab&quot;&gt;Jupyter Notebook / Jupyter Lab&lt;/h2&gt;

&lt;p&gt;Jupyter Notebook allows to create and share documents that contain live code, equations, visualizations and explanatory text. Text may be written in markdown markup  language. Code can produce rich output such as images, videos, LaTeX, and JavaScript. Interactive widgets can be used to manipulate and visualize data in real time.
Alternatively you may add path to the existing Jupyter notebook file with &lt;code class=&quot;highlighter-rouge&quot;&gt;.ipybn&lt;/code&gt; extension. If you add path to the notebook file ( extension &lt;code class=&quot;highlighter-rouge&quot;&gt;.ipynb&lt;/code&gt;), it will be opened in the location of the file. Jupyter automatically runs a local server.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;jupyter notebook

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;I 21:09:38.658 NotebookApp] Serving notebooks from &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;directory: /home/mdyzma/
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;I 21:09:38.659 NotebookApp] 0 active kernels
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;I 21:09:38.660 NotebookApp] The Jupyter Notebook is running at: http://localhost:8888/?token&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c6a93623006ede30a579af4d7e693909abd90c98224916ee
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;I 21:09:38.660 NotebookApp] Use Control-C to stop this server and shut down all kernels &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;twice to skip confirmation&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;. &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;C 21:09:38.665 NotebookApp]

    Copy/paste this URL into your browser when you connect &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the first &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;,
    to login with a token:
        http://localhost:8888/?token&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c6a93623006ede30a579af4d7e693909abd90c98224916ee
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;I 21:09:39.005 NotebookApp] Accepting one-time-token-authenticated connection from ::1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It should start notebook server in your browser (default address: &lt;a href=&quot;http://localhost:8888/tree&quot;&gt;http://127.0.0.1:8888&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/03-03-2017-jupyter-notebook.png&quot; alt=&quot;notebook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a handy collection of extensions that add functionality to the Jupyter notebook. Extensions are grouped in package &lt;a href=&quot;https://github.com/ipython-contrib/jupyter_contrib_nbextensions&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nbextensions&lt;/code&gt;&lt;/a&gt;, which is not included in fresh Anaconda installation and I will install it using conda:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;conda install -c conda-forge jupyter_contrib_nbextensions
Fetching package metadata .............
Solving package specifications: .

Package plan &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;installation &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;environment /home/mdyzma/anaconda3:

The following NEW packages will be INSTALLED:

    jupyter_contrib_core:              0.3.1-py36_0   conda-forge
    jupyter_contrib_nbextensions:      0.2.8-py36_1   conda-forge
    jupyter_highlight_selected_word:   0.0.10-py36_0  conda-forge
    jupyter_latex_envs:                1.3.8.2-py36_1 conda-forge
    jupyter_nbextensions_configurator: 0.2.5-py36_0   conda-forge

The following packages will be UPDATED:

    conda:                             4.3.21-py36_0              --&amp;gt; 4.3.21-py36_1 conda-forge

The following packages will be SUPERSEDED by a higher-priority channel:

    conda-env:                         2.6.0-0                    --&amp;gt; 2.6.0-0       conda-forge

Proceed &lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;y]/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? y


conda-env-2.6. 100% |###############################| Time: 0:00:00 206.58 kB/s
conda-4.3.21-p 100% |###############################| Time: 0:00:01 281.65 kB/s
jupyter_contri 100% |###############################| Time: 0:00:00 417.99 kB/s
jupyter_highli 100% |###############################| Time: 0:00:00 793.82 kB/s
jupyter_latex_ 100% |###############################| Time: 0:00:02 324.68 kB/s
jupyter_nbexte 100% |###############################| Time: 0:00:01 442.23 kB/s
jupyter_contri 100% |###############################| Time: 0:00:03   5.47 MB/s&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Because I used conda it will automatically register all extensions and copy necessary &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;css&lt;/code&gt; files in Jupyter environment for me. If I used pip instead, I would have to fetch additional command: &lt;code class=&quot;highlighter-rouge&quot;&gt;jupyter contrib nbextension install --user&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Jupyter Lab is new project of Jupyter team, which eventually will replace good old notebook, but currently it is in very early alpha release version and it is not recommended to be used in any serious project. It has built in file manager, image browser, documentation and many, many other. And one disadvantage: &lt;code class=&quot;highlighter-rouge&quot;&gt;ipywidgets&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nbextensions&lt;/code&gt; do not work yet or their functionality must be loaded through lab extensions system, which is not very convenient. Another handy extension is &lt;a href=&quot;https://github.com/rasbt/watermark&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;watermark&lt;/code&gt;&lt;/a&gt; package. It will timestamp notebooks and provide basic python configuration info. I will fetch latest version from GitHub:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;pip install -e git+https://github.com/rasbt/watermark#egg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;watermark
Obtaining watermark from git+https://github.com/rasbt/watermark#egg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;watermark
  Cloning https://github.com/rasbt/watermark to c:&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\m&lt;/span&gt;ichal&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;rc&lt;span class=&quot;se&quot;&gt;\w&lt;/span&gt;atermark
Requirement already satisfied: ipython &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/mdyzma/anaconda3/lib/site-packages &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;from watermark&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Installing collected packages: watermark
  Running setup.py develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;watermark
Successfully installed watermark&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Jupyter lab is not accessible in Anaconda distribution out of the box and must be installed. One can do it with default package manager from &lt;code class=&quot;highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; channel:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;conda install -c conda-forge jupyterlab
Fetching package metadata .............
Solving package specifications: .

Package plan &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;installation &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;environment /home/mdyzma/anaconda3:

The following NEW packages will be INSTALLED:

    jupyterlab:          0.23.2-py36_0 conda-forge
    jupyterlab_launcher: 0.2.9-py36_0  conda-forge

The following packages will be SUPERSEDED by a higher-priority channel:

    conda:               4.3.21-py36_0             --&amp;gt; 4.3.21-py36_0 conda-forge
    conda-env:           2.6.0-0                   --&amp;gt; 2.6.0-0       conda-forge

Proceed &lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;y]/n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;? y

conda-env-2.6. 100% |###############################| Time: 0:00:00  73.67 kB/s
conda-4.3.21-p 100% |###############################| Time: 0:00:01 378.40 kB/s
jupyterlab_lau 100% |###############################| Time: 0:00:00   1.18 MB/s
jupyterlab-0.2 100% |###############################| Time: 0:00:01   1.34 MB/s&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lab environment can be started using &lt;code class=&quot;highlighter-rouge&quot;&gt;jupyter lab&lt;/code&gt; command. It should start in default browser under this address: &lt;a href=&quot;http://localhost:8888/lab&quot;&gt;http://127.0.0.1:8888&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/03-03-2017-jupyter-lab.png&quot; alt=&quot;lab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More information about this project and development plans can be found &lt;a href=&quot;https://github.com/jupyterlab/jupyterlab&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Simple &lt;code class=&quot;highlighter-rouge&quot;&gt;conda list&lt;/code&gt; shows all packages installed in current environment. Main tools I will use in this tutorial include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;numpy&lt;/code&gt; - array calculations&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sympy&lt;/code&gt; - symbolic mathematics&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt; - 2D plotting&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;statsmodels&lt;/code&gt; - statistical models&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt; - data structures and analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;which are part of SciPy - python based scientific ecosystem. &lt;a href=&quot;http://www.numpy.org&quot;&gt;Numpy&lt;/a&gt; and &lt;a href=&quot;http://pandas.pydata.org&quot;&gt;Pandas&lt;/a&gt; alone have enormous documentations, which are worth to check. Huge advantage of notebook environment is that it allows to compute and manipulate data directly and export entire notebook in various formats, to share with other. There is also &lt;code class=&quot;highlighter-rouge&quot;&gt;JupyterHub&lt;/code&gt;, providing access to the notebook for multiple users, which can be used as a official project documentation  in secure location and controlled access. Check &lt;a href=&quot;https://jupyterhub.readthedocs.io/en/latest/&quot;&gt;JupyterHub&lt;/a&gt; documentation to learn more.&lt;/p&gt;

&lt;h2 id=&quot;experiments-examples&quot;&gt;Experiments examples:&lt;/h2&gt;

&lt;p&gt;To present power enclosed in python and jupyter notebook I will create several scenarios of typical experiments conducted in collage labs or own research. It will cover data acquisition, modeling, visualization and data storage.&lt;/p&gt;

&lt;h3 id=&quot;protein-concentration&quot;&gt;Protein concentration&lt;/h3&gt;

&lt;p&gt;Example of simple experiment with data from VIS spectrophotometric experiment. Lets assume specific substance is changing properties of the solution. For example when specific dye or biochemical reaction causes solution coloring, making it less penetrable by light.&lt;/p&gt;

&lt;h4 id=&quot;theoretical-background&quot;&gt;Theoretical background&lt;/h4&gt;

&lt;p&gt;For a uniform absorbing solution  the proportion of light passing through is called the transmittance: \(T\), and the proportion of light absorbed by molecules in the medium is absorbance, \(Abs\).&lt;/p&gt;

&lt;p&gt;Transmittance is defined as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;T =  \frac{I}{I_{o}}&lt;/script&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(I_o\) is intensity of the incident radiation entering the medium.&lt;/li&gt;
  &lt;li&gt;\(I\) = intensity of the transmitted radiation leaving the medium.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;T can be expressed as percent transmittance, \(%T\):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;%T = \frac{I}{I_{o}} \times 100&lt;/script&gt;

&lt;p&gt;The relationship between percent transmittance (\(\%T\)) and absorbance (\(Abs\)) is given by the following equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Abs = 2 - log (\%T)&lt;/script&gt;

&lt;p&gt;From above equation we can see, that probe, which absorbs 100% of the light will have transmittance 100% and absorbance equal 2 \((log_{10} 100 = 2)\), while completely transparent sample will have absorbance 0. Therefore theoretical span of Absorbance values range from 0 to 2, however Beer-Lambert’s law is most accurate in range 0.05 to 0.7 \(Abs\).&lt;/p&gt;

&lt;p&gt;The Beer-Lambert Law states that Absorbance is proportional to the concentration of the absorbing molecules, the length of light-path through the medium and the molar extinction coefficient:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Abs = \epsilon \cdot c \cdot l&lt;/script&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;\(Abs\) – absorbance&lt;/li&gt;
  &lt;li&gt;\(\epsilon\) – light extinction coefficient at max absorption wavelength \(\lambda_{max}\)&lt;/li&gt;
  &lt;li&gt;\(c\) – substance concentration&lt;/li&gt;
  &lt;li&gt;\(l\) – length of light-path&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;determine-the-absorption-spectra&quot;&gt;Determine the absorption spectra&lt;/h4&gt;

&lt;p&gt;In order to obtain \(\lambda_{max}\) one needs to obtain the absorbance of the diluted sample at 50 nm intervals between 350-700 nm. This will give you a ballpark estimate of where the sample absorbs most (peaks) and least (valleys). In normal conditions experiment would be conducted to measure this values. I will generate them using python. Sample data can be easily generated:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# absorbance of the sample at 50 nm intervals between 350-700 nm.&lt;/span&gt;
x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; range&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;350, 750, 50&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#random values in range 0.05 - 0.7&lt;/span&gt;
y &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; np.random.uniform&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.05, 0.7, len&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lets turn data into table:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;df &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; pd.DataFrame&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;y, &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x, &lt;span class=&quot;nv&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Absorbance'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
df.describe&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we get table in form of DataFrame. To find basic statistics, lets call &lt;code class=&quot;highlighter-rouge&quot;&gt;describe()&lt;/code&gt; method on data Frame.&lt;/p&gt;

&lt;h4 id=&quot;calculate-the-extinction-coefficient-epsilon-of-the-standards&quot;&gt;Calculate the extinction coefficient (\(\epsilon\)) of the standards.&lt;/h4&gt;

&lt;p&gt;In order to&lt;/p&gt;

&lt;h4 id=&quot;determine-the-concentration-of-proteins-in-solution-using-a-colorimetry&quot;&gt;Determine the concentration of proteins in solution using a colorimetry&lt;/h4&gt;

&lt;p&gt;First we measure absorbance construct column contains single column of timestamps and single column of measurements. Data can be in tex file, seprated with tabs, spaces, or other delimiter (i.e. coma).&lt;/p&gt;

&lt;h3 id=&quot;determination-of-dna-quality-and-quantity&quot;&gt;Determination of DNA Quality and Quantity&lt;/h3&gt;

&lt;p&gt;Lets imagine basic colorimetric experiment. In biology colorimetric techniques are used to measure&lt;/p&gt;

&lt;h3 id=&quot;text-data&quot;&gt;Text data&lt;/h3&gt;

&lt;p&gt;Data in biology are usually text based, grouped in columns, sometimes delimited with tabs, comas or other characters. For example It is like this in case o&lt;/p&gt;

&lt;h3 id=&quot;binary-data&quot;&gt;Binary data&lt;/h3&gt;

&lt;h2 id=&quot;plotting-in-python&quot;&gt;Plotting in Python&lt;/h2&gt;

&lt;h3 id=&quot;matplotlib&quot;&gt;Matplotlib&lt;/h3&gt;

&lt;h3 id=&quot;bokeh--seaborn&quot;&gt;Bokeh / Seaborn&lt;/h3&gt;

&lt;p&gt;All these activities may be successfully performed using python ecosystem. No doubt python has one of the best communities, active and contributing frequently with quality packages.&lt;/p&gt;

&lt;!-- ## Data and biology



Excel spreadsheet is simply not enough anymore. It lacks capabilities to properly hold large amounts of data, describe them and, what is most important, to exchange them with other collaborators.  Currently average MD experiments can produce hundreds of gigs of data. Average sequencing few gigs. From microscopy pictures to large MD trajectories you should be able to ingest, crack, visualize and share your data. Traditional statistical approach to analysis of the data is not enough and one needs to go deeper and deal with data more interactively, with more integrative insight. Currently in biology BigData is a big problem and is treated as such. But it is just a problem scientists are not ready to deal with. Giga- and tera- byte scale level requires large and expensive computational cluster or smart approach. Therefore, nowadays, basic _Data Science_ skills are essential for every decent researcher.



Python has very extensive toolkit to process various data in many different ways. What is more important - it is easy to learn. Lets take a closer look at some packages, that can be used in biology. Lets start small, to get comfortable to use python pipelines in every day analysis.

## Anaconda

Continuum Analytics developed great swiss-army toolkit to data science. It's name is [__Anaconda__][Anaconda]. It groups over 700 python programs called packages, which will help you get started with python and data science in no time. Also, it has huge advantage - it's free. There are competitive products like [Enthough Canopy's][Canopy] data science platform, or [Yhat's Rodeo][Rodeo], which also provide very decent software. In general they are all based on basic python data science tools like `numpy`, `pandas`, `dask`, `matplotlib`. Some of them have closed source original solutions to particular problems, some are based completely on freely available software. Feel free to try whatever suits you best. 

Why not pure python? Many packages included in Anaconda has non-trivial installation processes. Some parts of most frequently used packages (i.e numpy) are written in compiled languages like C/C++ or Fortran (hence their advantage over pure python solutions), therefore require specific compilers as well as some mathematical libraries like LAPAC, which must be linked during  compilation process. It is much easier to grab installer, in which all foreign dependencies are already compiled and shipped in form of binary files, and get going within few minutes, rather than deal with python __dependency hell__ for few days. Alternatively you can spend days trying to install all dependencies... The choice is yours.

How do we start working with python? In the beginning it good to see what you compute, experience the process itself, therefore I strongly recommend to start with `jupyter notebook`. Great tool to replace your lab-book, report files in various documents and data held in spreadsheets. 



This is our interactive window in browser, that allows us to talk to python interpreter. 


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

 --&gt;
&lt;h2 id=&quot;numpy--pandas&quot;&gt;Numpy &amp;amp; Pandas&lt;/h2&gt;

&lt;p&gt;Cornerstones of any data science project. Basic pair if it comes to deal with data. In biology majority of numerical data come in form of vectors (series of values) or tables. These two are more than enough to do variety of tasks like fast and efficient calculations, reading multiple formats, data cleaning, manipulation and visualization too. Numpy provides fast vector operations&lt;/p&gt;

&lt;h3 id=&quot;hdf5&quot;&gt;HDF5&lt;/h3&gt;
&lt;p&gt;http://www2.fiu.edu/~bch3033/bch3033l/pdf/spectra.pdf&lt;/p&gt;

&lt;h3 id=&quot;netcdf&quot;&gt;netCDF&lt;/h3&gt;

&lt;h2 id=&quot;biopandas&quot;&gt;Biopandas&lt;/h2&gt;

&lt;h2 id=&quot;biopython&quot;&gt;Biopython&lt;/h2&gt;

&lt;p&gt;All examples can be also downloaded in form of Jupyter Notebook file from &lt;a href=&quot;https://github.com/mdyzma/blog-src-files&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Links --&gt;

&lt;!-- Images --&gt;</content>

      
      
      
      
      

      
        <author>
            <name>Michal Dyzma</name>
          
          
        </author>
      

      
        <category term="python" />
      
        <category term="jupyter-notebook" />
      
        <category term="data" />
      

      

      
        <summary type="html">Data analysis using Jupyter Notebook. Natural sciences more and more rely on skills related to Data Science. Experiments produce more and more data, and skilled researcher has to know how to deal with variety of data and sometime very large datasets. Anaconda Python Distribution offers large set of great tools to manipulate any kind of data “out of the box”. Multitude of community packages allows to read, analyze and report all kinds of data produced by science. It is caused mostly by simple fact, that scientific community is developing it’s tools mostly in Python. How to work with small and large data in python and make Jupyter Notebook your lab-book? Check this article.</summary>
      

      
      
    </entry>
  
  
</feed>
